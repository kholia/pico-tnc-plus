// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// pio_dac //
// ------- //

#define pio_dac_wrap_target 0
#define pio_dac_wrap 0

static const uint16_t pio_dac_program_instructions[] = {
  //     .wrap_target
  0x6001, //  0: out    pins, 1
  //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_dac_program = {
  .instructions = pio_dac_program_instructions,
  .length = 1,
  .origin = -1,
};

static inline pio_sm_config pio_dac_program_get_default_config(uint offset) {
  pio_sm_config c = pio_get_default_sm_config();
  sm_config_set_wrap(&c, offset + pio_dac_wrap_target, offset + pio_dac_wrap);
  return c;
}

#include "hardware/clocks.h"
static inline void pio_dac_program_init(PIO pio, uint sm, uint offset, uint pin, float fs) {
  pio_sm_config c = pio_dac_program_get_default_config(offset);
  // Map the state machine's OUT pin group to one pin, namely the `pin`
  // parameter to this function.
  sm_config_set_out_shift(&c, true, true, 32);
  sm_config_set_out_pins(&c, pin, 1);
  sm_config_set_clkdiv(&c, (float)clock_get_hz(clk_sys) / fs);
  // Set this pin's GPIO function (connect PIO to the pad)
  pio_gpio_init(pio, pin);
  // Set the pin direction to output at the PIO
  pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
  // Load our configuration, and jump to the start of the program
  pio_sm_init(pio, sm, offset, &c);
  // Set the state machine running
  pio_sm_set_enabled(pio, sm, true);
}

#endif

